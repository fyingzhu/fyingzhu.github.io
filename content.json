{"meta":{"title":"fyingzhu's Blog","subtitle":"分享知识,收获快乐,总结自我","description":"分享知识,收获快乐,总结自我","author":null,"url":"http://fyingzhu.com"},"pages":[{"title":"about","date":"2018-01-24T12:15:08.000Z","updated":"2018-01-25T03:13:17.920Z","comments":true,"path":"about/index.html","permalink":"http://fyingzhu.com/about/index.html","excerpt":"","text":"世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。 关于我 爱音乐，爱编程，Github（欢迎 Follow 和 Star） 机器学习方向，目前就职于某企，坐标：重庆 喜欢数据分析，kaggle，天池…XD 喜欢听歌、羽毛球、跑步、健身等运动～～ Of course，也喜欢各类桌游、网游、手游等游戏～～ 关于文章 记录日常工作或生活中的一些感悟和想法，皆为拙见"},{"title":"分类","date":"2017-06-13T15:04:12.000Z","updated":"2017-06-23T15:32:45.000Z","comments":false,"path":"categories/index.html","permalink":"http://fyingzhu.com/categories/index.html","excerpt":"","text":""},{"title":"acm","date":"2017-06-21T15:39:50.000Z","updated":"2017-06-23T15:32:45.000Z","comments":false,"path":"acm/index.html","permalink":"http://fyingzhu.com/acm/index.html","excerpt":"","text":"更多ACM文章"},{"title":"life","date":"2017-06-21T15:36:06.000Z","updated":"2017-06-23T15:32:45.000Z","comments":false,"path":"life/index.html","permalink":"http://fyingzhu.com/life/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-06-13T14:55:06.000Z","updated":"2017-06-23T15:32:45.000Z","comments":false,"path":"tags/index.html","permalink":"http://fyingzhu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"时序分类","slug":"时序分类","date":"2018-12-11T09:22:00.000Z","updated":"2018-12-11T09:23:34.088Z","comments":true,"path":"2018/12/11/时序分类/","link":"","permalink":"http://fyingzhu.com/2018/12/11/时序分类/","excerpt":"","text":"时序数据，分类","categories":[],"tags":[]},{"title":"我的博客入门","slug":"我的博客入门","date":"2018-12-03T05:59:34.346Z","updated":"2018-01-25T03:52:35.760Z","comments":true,"path":"2018/12/03/我的博客入门/","link":"","permalink":"http://fyingzhu.com/2018/12/03/我的博客入门/","excerpt":"欢迎来到我的博客","text":"欢迎来到我的博客","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-12-03T05:59:34.337Z","updated":"2018-01-22T07:18:05.810Z","comments":true,"path":"2018/12/03/hello-world/","link":"","permalink":"http://fyingzhu.com/2018/12/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"kaggle系列之Machine Learning","slug":"kaggle系列之Machine-Learning","date":"2018-03-01T02:51:53.000Z","updated":"2018-03-01T03:01:28.695Z","comments":true,"path":"2018/03/01/kaggle系列之Machine-Learning/","link":"","permalink":"http://fyingzhu.com/2018/03/01/kaggle系列之Machine-Learning/","excerpt":"本系列是kaggle learn中的内容，学习并记录之。","text":"本系列是kaggle learn中的内容，学习并记录之。","categories":[{"name":"kaggle","slug":"kaggle","permalink":"http://fyingzhu.com/categories/kaggle/"}],"tags":[{"name":"learn","slug":"learn","permalink":"http://fyingzhu.com/tags/learn/"}]},{"title":"kaggle系列之Machine Learning","slug":"kaggle系列之text","date":"2018-03-01T02:51:53.000Z","updated":"2018-03-01T03:01:28.695Z","comments":true,"path":"2018/03/01/kaggle系列之text/","link":"","permalink":"http://fyingzhu.com/2018/03/01/kaggle系列之text/","excerpt":"本系列是kaggle learn中的内容，学习并记录之。","text":"本系列是kaggle learn中的内容，学习并记录之。","categories":[{"name":"kaggle","slug":"kaggle","permalink":"http://fyingzhu.com/categories/kaggle/"}],"tags":[{"name":"learn","slug":"learn","permalink":"http://fyingzhu.com/tags/learn/"}]},{"title":"ubuntu16.04 + NVIDIA驱动 + CUDA + CUDA + tensorflow-gpu + keras安装","slug":"ubuntu16.04 + NVIDIA驱动 + CUDA + CUDA + tensorflow-gpu + keras安装","date":"2018-01-30T08:34:00.000Z","updated":"2018-01-31T06:36:59.395Z","comments":true,"path":"2018/01/30/ubuntu16.04 + NVIDIA驱动 + CUDA + CUDA + tensorflow-gpu + keras安装/","link":"","permalink":"http://fyingzhu.com/2018/01/30/ubuntu16.04 + NVIDIA驱动 + CUDA + CUDA + tensorflow-gpu + keras安装/","excerpt":"写在前面，一路安装走来，遇到很多TensorFlow、cuda、cudnn版本不兼容匹配的，后来，我找到了NVIDIA官方系统配置 ，可以按照这个来配置，避免多走弯路。 环境： ubuntu 16.04 64bit 显卡：NVIDIA Tesla k40m + 集成显卡 注：在NVIDIA DriverDownloads查找的最新为384.66，系统配置如下： 但是，安装不成功！后选择375.66成功 驱动：nvidia 375.66 软件：cuda8.0 + cuDNN5.1","text":"写在前面，一路安装走来，遇到很多TensorFlow、cuda、cudnn版本不兼容匹配的，后来，我找到了NVIDIA官方系统配置 ，可以按照这个来配置，避免多走弯路。 环境： ubuntu 16.04 64bit 显卡：NVIDIA Tesla k40m + 集成显卡 注：在NVIDIA DriverDownloads查找的最新为384.66，系统配置如下： 但是，安装不成功！后选择375.66成功 驱动：nvidia 375.66 软件：cuda8.0 + cuDNN5.1 1.准备工作：1.1 配置安装环境若不安装第5步 tensorflow-gpu+keras，此处可省略。。1234567sudo apt-get updatesudo apt-get install python-dev python-pip python-nose gcc g++ git gfortransudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compilersudo apt-get install --no-install-recommends libboost-all-devsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-devsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-devsudo apt-get install git cmake build-essential 1.2 禁用自带的显卡驱动nouveau1sudo gedit /etc/modprobe.d/blacklist-nouveau.conf 在其中加入：1blacklist nouveau option nouveau modeset=0 1sudo update-initramfs -u 1.3 加入环境变量1sudo gedit ~/.bashrc 在其中加入：12export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATHexport LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH 执行1source ~/.bashrc 2. 安装NVIDIA显卡驱动首先还是先去官网下载正确的显卡驱动，官网：http://www.geforce.cn/drivers查看自己的显卡型号：1sudo lshw -numeric -C display 如果之前安装过nvidia驱动，先卸载：1sudo apt-get remove --purge nvidia-* Ctrl-Alt+F1 进入命令行界面12345678cd Downloadssudo /etc/init.d/lightdm stop #关闭当前图形环境令sudo chmod a+x NVIDIA-Linux-x86_64-375.66.run #给驱动run文件赋予执行权限sudo ./NVIDIA-Linux-x86_64-375.66.run --no-x-check--no-nouveau-check --no-opengl-files # 这句一定要加参数，不然就会循环登录。 如果进入循环登录，要再次Ctrl-Alt+F1 进入命令行界面，卸载驱动：sudo apt-get remove –purge nvidia-* –no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要 –no-check 安装驱动时不检查X服务 –no-nouveau-check 安装驱动时不检查nouveau 后面两个参数可不加(Ps: 没懂 - 与 - - 的区别，貌似都可以，我上面写的是两个- -哦)。123sudo /etc/init.d/lightdm start #重新启动图形环境reboot 3. 安装cuda去官网下载：https://developer.nvidia.com/cuda-downloads 注意一定要下载runfile。 Ctrl-Alt+F1 进入命令行界面123456cd Downloadssudo service lightdm stop #禁用X服务sudo /etc/init.d/lightdm stop #一样的命令sudo sh cuda-8.0.44_linux.run --no-opengl-libs 注：第一条问是否安装nvidia驱动，选择no，后面一直输入yes就行123sudo /etc/init.d/lightdm start #启用服务reboot 重启之后进入修改环境配置1sudo gedit ~/.bashrc 加入：12export PATH=/usr/local/cuda-8.0/bin:$PATHexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH 执行：1source ~/.bashrc 测试安装是否成功：12345cd /usr/local/cuda-8.0/samples/1_Utilities/deviceQuerysudo make./deviceQuery 显示gpu信息，说明安装成功。 查看显卡情况：nvidia-smi 4. 配置cuDNN官网下载：https://developer.nvidia.com/rdp/cudnn-download 注册账号之后就可以下载啦。(参考文献1下载的5.1，安装6.0没试）123456789101112131415cd Downloads/cudasudo cp -a include/cudnn.h /usr/local/cuda/include/ # 复制头文件cd ./lib64sudo cp -a lib* /usr/local/cuda/lib64/ #复制动态链接库cd /usr/local/cuda/lib64/sudo rm -rf libcudnn.so libcudnn.so.5 #删除原有动态文件sudo ln -s libcudnn.so.5.1.5 libcudnn.so.5 #生成软衔接sudo ln -s libcudnn.so.5 libcudnn.so #生成软链接 5. tensorflow-gpu and keras1234567sudo pip install -U --pre pip setuptools wheelsudo pip install -U --pre numpy scipy matplotlib scikit-learn scikit-imagesudo pip install -U --pre tensorflow-gpu==1.2sudo pip install -U --pre keras 注：sudo pip install -U –pre tensorflow-gpu==1.2 , 若没有指定版本，则下载的是最新的版本，我在安装过程中出现以下了问题： gpu=1.5 ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory gpu=1.4 ImportError:libcudnn.so.6: cannot open shared object file: No such file or directory 所以，最后选择了gpu1.2，测试成功。 6. 验证：6.1 简单测试首先关闭所有打开的终端并打开一个新的终端。 将目录（cd）更改为系统中除调用configure命令的tensorflow子目录之外的任何目录。 调用python：在命令行输入python输入以下短程序：1234import tensorflow as tf hello = tf.constant(&apos;Hello,TensorFlow!&apos;)sess = tf.Session()print(sess.run(hello)) 你应该看到“你好，TensorFlow！”。恭喜！您也可以输入1print(tf.__version__) 查看安装的TensorFlow的版本。 6.2官网给出的测试：12345git clone https://github.com/fchollet/keras.gitcd keras/examples/python mnist_mlp.py 我的测试结果如下: 可以看到，启用了device(/gpu:0) 参考文献 双显卡 ubuntu16.04 安装 NVIDIA驱动 + CUDA + cuDNN + tensorflow-gpu + keras http://wiki.ubuntu.org.cn/NVIDIA tensorflow安装所遇问题：libcudnn.so.6:cannot open sharedobject file: No such file or directory","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://fyingzhu.com/categories/深度学习/"},{"name":"环境配置","slug":"深度学习/环境配置","permalink":"http://fyingzhu.com/categories/深度学习/环境配置/"}],"tags":[{"name":"ubuntu16.04","slug":"ubuntu16-04","permalink":"http://fyingzhu.com/tags/ubuntu16-04/"},{"name":"CUDA","slug":"CUDA","permalink":"http://fyingzhu.com/tags/CUDA/"},{"name":"tensorflow-gpu","slug":"tensorflow-gpu","permalink":"http://fyingzhu.com/tags/tensorflow-gpu/"},{"name":"keras","slug":"keras","permalink":"http://fyingzhu.com/tags/keras/"}]},{"title":"ubuntu16 环境下 TensorFlow serving安装指南","slug":"ubuntu16 环境下 TensorFlow serving安装指南","date":"2018-01-24T09:54:07.000Z","updated":"2018-01-25T03:32:59.193Z","comments":true,"path":"2018/01/24/ubuntu16 环境下 TensorFlow serving安装指南/","link":"","permalink":"http://fyingzhu.com/2018/01/24/ubuntu16 环境下 TensorFlow serving安装指南/","excerpt":"1. 安装bazel 安装参考Install Bazel on Ubuntu 采用第一种 Using Bazel custom APT repository (recommended) 方法： Install JDK 8 1sudo apt-get install openjdk-8-jdk Add Bazel distribution URI as a package source (one time setup) 12echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | sudo tee /etc/apt/sources.list.d/bazel.listcurl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -","text":"1. 安装bazel 安装参考Install Bazel on Ubuntu 采用第一种 Using Bazel custom APT repository (recommended) 方法： Install JDK 8 1sudo apt-get install openjdk-8-jdk Add Bazel distribution URI as a package source (one time setup) 12echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | sudo tee /etc/apt/sources.list.d/bazel.listcurl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - Install and update Bazel 1sudo apt-get update &amp;&amp; sudo apt-get install bazel Once installed, you can upgrade to a newer version of Bazel with: 1sudo apt-get upgrade bazel 2. 安装gprc1sudo pip install grpcio 提示没有pip，安装pip 3.PackagesTo install TensorFlow Serving dependencies, execute the following: 12345678910111213141516sudo apt-get update &amp;&amp; sudo apt-get install -y \\ build-essential \\ curl \\ libcurl3-dev \\ git \\ libfreetype6-dev \\ libpng12-dev \\ libzmq3-dev \\ pkg-config \\ python-dev \\ python-numpy \\ python-pip \\ software-properties-common \\ swig \\ zip \\ zlib1g-dev 3. 从源代码安装克隆TensorFlow Serving存储库12git clone --recurse-submodules https://github.com/tensorflow/servingcd serving clone会非常慢，建议百度加速，我是硬等了3个小时才clone完。 下一步，配置TensorFlow, 运行：123cd tensorflow./configurecd .. 配置过程中，会有很多选项问你是否需要，根据需要输入y/n即可。不用的尽量填n，否则后面会有很多文件的路径难以配置（LZ遇到的坑：有些文件根本没有，却让你输入路径）。 配置的第一项是确认python路径，默认的是/usr/bin/python，可以用which python查看当前python的路径。 4. BuildTo build the entire tree, execute: 1bazel build -c opt tensorflow_serving/... To test your installation, execute:1bazel test -c opt tensorflow_serving/... 注：过程中会遇到的问题及解决方法：国外软件源安装遇到的坑会少很多。。所以请首先更换软件源在安装其他软件吧。 添加软件源安装完Ubuntu 16.04后 ，更换为国内的软件源： 1sudo gedit /etc/apt/sources.list 在文件开头添加下面的网易的软件源： 123456789101112deb http://mirrors.163.com/ubuntu/ precise-updates main restricteddeb-src http://mirrors.163.com/ubuntu/ precise-updates main restricteddeb http://mirrors.163.com/ubuntu/ precise universedeb-src http://mirrors.163.com/ubuntu/ precise universedeb http://mirrors.163.com/ubuntu/ precise-updates universedeb-src http://mirrors.163.com/ubuntu/ precise-updates universedeb http://mirrors.163.com/ubuntu/ precise multiversedeb-src http://mirrors.163.com/ubuntu/ precise multiversedeb http://mirrors.163.com/ubuntu/ precise-updates multiversedeb-src http://mirrors.163.com/ubuntu/ precise-updates multiversedeb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse 更新软件源： 1sudo apt-get update 更改文件夹权限 sudo chmod 777 XXX 结束当前命令 ctrl + c 参考文献 Ubuntu 16.04LTS安装后需要做的事 https://github.com/tensorflow/serving https://github.com/grpc/grpc/tree/master/src/python/grpcio Install Bazel on Ubuntu","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://fyingzhu.com/categories/深度学习/"}],"tags":[{"name":"安装调试","slug":"安装调试","permalink":"http://fyingzhu.com/tags/安装调试/"}]},{"title":"利用LSTM进行时间序列预测","slug":"LSTM Neural Network for Time Series Prediction","date":"2018-01-24T09:54:07.000Z","updated":"2018-01-25T03:46:55.161Z","comments":true,"path":"2018/01/24/LSTM Neural Network for Time Series Prediction/","link":"","permalink":"http://fyingzhu.com/2018/01/24/LSTM Neural Network for Time Series Prediction/","excerpt":"本文基于LSTM Neural Network for Time Series Prediction 神经网络是当今机器学习中的新潮流。因此，在基本的神经网络上有过多的课程和教程，从简单的教程到深入描述它们工作的复杂文章。 对于更深层的网络，对图像分类任务的痴迷似乎也使教程出现在更复杂的卷积神经网络上。如果你做的是这样的事情，是极好的，但对我来说，我并不特别热衷于分类图像。我对时间框架的数据更感兴趣。这就是复发神经网络（RNNs）来的方便（我猜想通过阅读这篇文章你会知道长时间的记忆网络（LSTM）是RNN最受欢迎和最有用的变体，如果不是，有很多有用的文章描述了LSTM，可以先去看看）。","text":"本文基于LSTM Neural Network for Time Series Prediction 神经网络是当今机器学习中的新潮流。因此，在基本的神经网络上有过多的课程和教程，从简单的教程到深入描述它们工作的复杂文章。 对于更深层的网络，对图像分类任务的痴迷似乎也使教程出现在更复杂的卷积神经网络上。如果你做的是这样的事情，是极好的，但对我来说，我并不特别热衷于分类图像。我对时间框架的数据更感兴趣。这就是复发神经网络（RNNs）来的方便（我猜想通过阅读这篇文章你会知道长时间的记忆网络（LSTM）是RNN最受欢迎和最有用的变体，如果不是，有很多有用的文章描述了LSTM，可以先去看看）。 现在虽然有很多关于LSTM的公共研究论文和文章，但是我发现几乎所有这些都涉及到他们背后的理论运作和数学，他们所提供的例子并不能真正显示超前预测的能力，根据LSTM时间序列。再次，如果您想知道LSTM的错综复杂的工作原理是极好的，但如果您只是希望获得运行正常运行，则不是理想的。 那么我将在这里做的是给出一个关于使用LSTM来预测一些时间序列的完整的代码教程，使用Python[2.7]的Keras包。 友好警告：如果您正在寻找一个从数学和理论的角度来处理LSTM的工作的文章，那么会让你很失望。然而，如果你正在寻找一个有实际编码示例的文章，请继续阅读… 注意：该项目的完整代码可以在GitHub页面上找到。 一个简单的正弦波我们可以从我们想到最基本的时间序列开始：正弦函数。让我们创建的数据我们需要的LSTM网络训练在这个功能很多振荡模型。我制作了一个excel电子表格，使幅度和频率为1的sin波（给出6.28的角频率），并且我使用该功能获得超过5001个时间段的数据点，时间差值为0.01。结果就像这样。5001时间段的完整正弦波数据集 为了节省您使这个的麻烦,我已经把数据放到这个CSV，将使用的训练/测试文件在这里。 现在我们有数据，我们实际试图实现什么？很简单，我们希望LSTM从我们提供的一组窗口数据中学习正弦波，然后希望我们可以要求LSTM来预测这个系列中的下一个N步骤，并且不断地吐出正弦波。 我们将首先将CSV文件中的数据转换并加载到将提供LSTM的numpy数组。Keras LSTM层的工作方式是采用三维数组（N，W，F），其中N是训练序列的数量，W是序列长度，F是每个序列的特征数。我选择了一个序列长度（读取窗口大小）为50，它允许网络在每一个序列中看到正弦波的形状，因此希望自己能根据接收到的窗口建立一个序列的模式。这些序列本身是滑动窗口，因此每次移动1，导致与先前的窗口经常重叠。长度为50的序列的示例 以下是将训练数据CSV加载到适当形状的numpy数组中的代码： 1234567891011121314151617181920212223def load_data(filename, seq_len, normalise_window): f = open(filename, 'rb').read() data = f.decode().split('\\n') sequence_length = seq_len + 1 result = [] for index in range(len(data) - sequence_length): result.append(data[index: index + sequence_length]) result = np.array(result) row = round(0.9 * result.shape[0]) train = result[:int(row), :] np.random.shuffle(train) x_train = train[:, :-1] y_train = train[:, -1] x_test = result[int(row):, :-1] y_test = result[int(row):, -1] x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1)) x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1)) return [x_train, y_train, x_test, y_test] 接下来我们需要实际构建网络本身。这是简单的部分！至少如果你使用Keras，就像堆积乐高砖一样简单。我使用了[1，50，100，1]的网络结构，其中我们有一个输入层（由一个大小为50的序列组成），其输入具有50个神经元的LSTM层，然后将其馈送到另一个LSTM层，其中100个神经元然后以具有线性激活功能的1个神经元的完全连接的正常层进行馈送，这将用于给出下一个时间步长的预测。 以下是模型构建函数的代码： 12345678910111213141516171819202122def build_model(layers): model = Sequential() model.add(LSTM( input_shape=(layers[1],layers[0]), output_dim=layers[1], return_sequences=True)) model.add(Dropout(0.2)) model.add(LSTM( layers[2], return_sequences=False)) model.add(Dropout(0.2)) model.add(Dense( output_dim=layers[3])) model.add(Activation(\"linear\")) start = time.time() model.compile(loss=\"mse\", optimizer=\"rmsprop\") print(\"&gt; Compilation Time : \", time.time() - start) return model 最后是时候对数据进行网络训练，看看我们得到了什么。我只用了这个LSTM的1个训练时期，这与传统网络不同，传统的网络需要大量的时代来为网络训练大量的训练示例，在这个1个时期，LSTM将循环遍历训练集中的所有序列窗口。如果这个数据具有较少的结构，则需要大量的时代，但是由于这是具有映射到简单函数的可预测模式的正弦波，训练时期将足够好以获得非常好的近似值全功能功能。 我们将所有这些运行代码放在一个单独的run.py模块中，并运行它： 12345678910111213141516171819epochs = 1seq_len = 50print('&gt; Loading data... ')X_train, y_train, X_test, y_test = lstm.load_data('sp500.csv', seq_len, True)print('&gt; Data Loaded. Compiling...')model = lstm.build_model([1, 50, 100, 1])model.fit( X_train, y_train, batch_size=512, nb_epoch=epochs, validation_split=0.05)predicted = lstm.predict_point_by_point(model, X_test) 如果您是观察者，您将在上面的load_data（）函数中注意到，我们将数据分为训练集/测试集，就像机器学习问题的标准做法。然而，我们需要注意的是我们实际想在时间序列的预测中实现的。 如果我们使用测试集，我们将运行每个窗口的真实数据，以预测下一个时间步。如果我们只想预测一个时间步，那么这是很好的，但是如果我们想要预测多个时间步，也许想预测任何紧急的趋势或功能（例如sin函数在这种情况下）使用完整的测试集，将意味着我们会预测下一时间步。无论这一预测，随后的步骤和时间，只使用真实的数据为每个时间步。 您可以在下面的图表中看到，使用这种方法只能预测每个时间点的前一个时间步长：epochs = 1, window size = 50 然而，如果我们想要做出真正的魔法，并预测许多时间步，我们只使用测试数据的第一个窗口作为启动窗口。在每个时间步，我们将窗口后面的最旧的条目弹出，并将下一个时间步长的预测附加到窗口的前面，实质上是将窗口移动，从而缓慢地建立自己的预测，直到窗口充满了预测值（在我们的情况下，由于我们的窗口大小为50，这将在50个时间步长之后发生）。然后，我们无限期地保持这一点，预测下一次对未来时间步长的预测的时间步长，希望看到新趋势。 下图显示正弦波时间序列，仅从真实测试数据的初始起始窗口预测，然后预测约500步：epochs = 1, window size = 50 通过真实的数据，我们可以看到，只有1个时期和一个相当小的数据训练集，LSTM已经做了很好的预测sin的功能。您可以看到，随着我们预测越来越多的未来，误差幅度会随着以前预测中的错误被越来越多地用于将来的预测而增加。因此，我们看到，LSTM没有得到正确的频率，它越来越多地尝试预测它。然而，由于sin函数是具有零噪声的非常容易的振荡函数，它可以很好的预测它。 接下来，我们将尝试看看当我们尝试预测更多随机现实世界的数据时会发生什么。。 一个不那么简单的股票市场我们预测了一个精确逐点的几百次的正弦波。那么我们现在可以在股市时间序列上做同样的事情呢？ 好吧，不行 “没有人知道股票会上涨，下跌，横盘还是他妈的圈子” - 马克·汉娜 不幸的是，股票时间序列不是可以映射的函数。它可以更好地描述为随机游走，这使得整个预测的事情相当困难。但是，LSTM如何识别任何潜在的隐藏趋势呢？那我们来看看吧。 这是一个CSV文件，我在2000年1月至2016年8月期间采取了标准普尔500指数的调整后收盘价。我已经删除了所有内容，使其与我们的正弦波数据完全相同，现在我们将会通过与我们在同一个训练集/测试集的sin波上使用的相同模型运行它。 然而，我们需要对我们的数据进行一些微小的改变，因为正弦波已经是一个很好的标准化重复模式，它通过网络良好地运行原始数据点。然而，通过网络运行股票指数的调整回报将使优化过程自身失效，并且不会收敛到任何类型的最佳数量。所以为了解决这个问题，我们将采取每个n尺寸的训练/测试数据窗口，并对每个窗口进行归一化，以反映该窗口开始时的百分比变化（因此点i = 0处的数据总是为0）。在预测过程结束时，我们将使用以下等式来归一化和随后解规范化，以便将预测中的真实世界数字： n =价格变动的正常化列表[窗口] p =调整后的每日回报价格的原始列表[窗口] 我们在我们的代码中添加了一个normalise_windows（window_data） 函数，并更新了load_data（filename） 函数，以包括一个条件调用，并取得序列长度并标准化load_data（filename，seq_len，normalise_window）： 123456789101112131415161718192021222324252627282930313233def load_data(filename, seq_len, normalise_window): f = open(filename, 'rb').read() data = f.decode().split('\\n') sequence_length = seq_len + 1 result = [] for index in range(len(data) - sequence_length): result.append(data[index: index + sequence_length]) if normalise_window: result = normalise_windows(result) result = np.array(result) row = round(0.9 * result.shape[0]) train = result[:int(row), :] np.random.shuffle(train) x_train = train[:, :-1] y_train = train[:, -1] x_test = result[int(row):, :-1] y_test = result[int(row):, -1] x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1)) x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1)) return [x_train, y_train, x_test, y_test]def normalise_windows(window_data): normalised_data = [] for window in window_data: normalised_window = [((float(p) / float(window[0])) - 1) for p in window] normalised_data.append(normalised_window) return normalised_data 现在已经如上所述归一化了Windows，因此我们现在可以通过我们的LSTM网络运行我们的库存数据。让我们看看它是如何做的：epochs = 50, window size = 50 如上所述在单个逐点预测中运行数据可以很好地匹配回报。但这是欺骗性的！为什么？那么如果你看得更紧密，预测线就是由单一的预测点组成的，这些预测点在他们之前有整个真实历史窗口。因此，网络不需要太多关于时间序列本身的知识，除了每个下一个点最有可能不会离最后一点太远。所以即使它得到了错误的预测，下一个预测将会因真实的历史而忽视不正确的预测，而再次允许出现错误。 我们不能看到LSTM的大脑发生了什么，但是我会强调，对于这个本质上是随机游走的预测（我们已经做了一个完全随机的数据行走）是模仿股票指数的外观，而且完全相同的事情也是如此！）是以基本上高斯分布“预测”下一个点，从而允许基本上随机的预测不会从真实的数据中流失太多。 那么，如果我们想看看在价格走势中是否真的有一些潜在的模式可以辨别，那么我们会怎么看？那么我们会做出与波浪问题相同的事情，让网络预测一系列的点，而不是下一个点。 我们现在可以看到，与作为一个与真实数据几乎相同的正弦波序列的正弦波不同，我们的股票数据预测非常迅速地收敛于某种平衡。 看看我们所运行的两个训练样本的平衡（一个有1个时期，一个具有50个时期），我们可以看到两者之间存在着巨大的差异。这种疯狂的差异似乎与你所期望的完全一致；通常更高的时代将意味着更准确的模型，然而在这种情况下，它几乎看起来好像单个时代模型倾向于通常遵循短时间价格变动的某种逆转。 我们进一步调查这一点，将我们的预测序列限制到50个未来时间步长，然后每次将启动窗口移动50个，实际上创建了50个时间步长的许多独立序列预测： 我会在这里诚实地说，上面的图表中的结果令我有点惊讶。我期待能够证明，这将是一个愚蠢的游戏，试图从纯粹的历史价格走势来预测未来价格变动的股票指数（因为有这么多潜在因素影响每日价格波动;从基础公司的基本因素，宏观事件，投资者情绪和市场噪音…）然而，检查上面非常有限的测试的预测，我们可以看到，对于很多运动，特别是大型运动，似乎有很大的共识模型预测和随后的价格走势。 我会在这里放一个他妈的大警告标志！为什么上述“有希望的”图可能是错误的，有很多原因。抽样错误，纯粹的运气在一个小的样本大小…这个图表中没有什么应该采取面值，盲目追随一个钱吸吮坑没有一些彻底和广泛的一系列的backtests（这超出了本文的范围）。你已经被警告了 实际上，当我们看看上面的图表同样的运行，但是时代增加到400（这应该使模型模式准确），我们看到，实际上现在只是尝试是预测几乎每个时间段的向上的动力！ 然而，我希望你们所有渴望的年轻人都学会了什么使得LSTM网络成为可能的基础，以及如何使用它来预测和映射时间序列，以及这样做的潜在缺陷。 LSTM使用目前在文字预测，AI聊天应用程序，自驾车等众多领域都很丰富。希望本文扩展了在时间序列方法中使用LSTM的实际应用，您已经发现它很有用。 为了完整，下面是您可以在GitHub页面上找到的完整项目代码： 为了参考，我用于运行我的神经网络模型的机器是我强烈推荐的小米Mi笔记本电脑13，因为它具有内置的Nvidia GeForce 940MX显卡，可以与Tensorflow GPU版本一起加速并发模型像LSTM。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://fyingzhu.com/categories/深度学习/"}],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"http://fyingzhu.com/tags/deep-learning/"}]},{"title":"my new post","slug":"my-new-post","date":"2018-01-22T09:54:07.000Z","updated":"2018-01-25T03:28:39.297Z","comments":true,"path":"2018/01/22/my-new-post/","link":"","permalink":"http://fyingzhu.com/2018/01/22/my-new-post/","excerpt":"","text":"搭建个人博客-hexo+github详细完整步骤 一个简洁优雅的hexo主题yilia HEXO+Github,搭建属于自己的博客","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://fyingzhu.com/categories/杂谈/"}],"tags":[{"name":"记事","slug":"记事","permalink":"http://fyingzhu.com/tags/记事/"}]}]}